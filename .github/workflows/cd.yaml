name: Continous deployment

on:
  push:
    branches: ["main"]
    tags: ["*"]
  pull_request:
    branches: ["main"]

jobs:
  update_terraform_dev:
    name: Update Terraform version (dev only)
    if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Read version from file
        id: version
        run: echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Update Terraform app_version
        env:
          TAG: ${{ steps.version.outputs.version }}
          ENVIRONMENT: development
        run: |
          # Configuration
          DEV_FILE="infrastructure/workspaces/platform-development/main.tf"

          # Function to update a file
          update_file() {
            local file=$1
            local tag=$2
            local env_name=$3
            
            echo "Updating $file with tag $tag"
            sed -i "s/app_version = \".*\"/app_version = \"${tag}\"/" "$file"
            
            if git diff --quiet "$file"; then
              echo "No changes needed in $file - already up to date"
              return 1
            else
              echo "Changes made to $file"
              return 0
            fi
          }

          # Variables for commit
          changes_made=false
          commit_message=""

          # Update development environment
          echo "Updating development environment"
          if update_file "$DEV_FILE" "$TAG" "development"; then
            changes_made=true
            commit_message="chore: update app_version to $TAG for development environment"
          fi

          # Check if any changes were made
          if [ "$changes_made" = false ]; then
            echo "No changes needed - app_version already up to date"
            exit 0
          fi

          # Commit and push changes
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "$DEV_FILE"
          git commit -m "$commit_message"
          git push

  update_terraform_both:
    name: Update Terraform version (both environments)
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Read version from file
        id: version
        run: echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Validate tag is on main branch
        run: |
          # Get the commit SHA that the tag points to
          TAG_COMMIT_SHA=$(git rev-list -n 1 ${{ github.ref_name }})
          
          # Check if this commit exists in main branch
          if ! git branch -r --contains $TAG_COMMIT_SHA | grep -q "origin/main"; then
            echo "Error: Tag ${{ github.ref_name }} is not on main branch"
            exit 1
          fi
          
          echo "âœ… Tag ${{ github.ref_name }} is on main branch"

      - name: Update Terraform app_version
        env:
          TAG: ${{ steps.version.outputs.version }}
          ENVIRONMENT: both
        run: |
          # Configuration
          DEV_FILE="infrastructure/workspaces/platform-development/main.tf"
          PROD_FILE="infrastructure/workspaces/platform-production/main.tf"

          # Function to update a file
          update_file() {
            local file=$1
            local tag=$2
            local env_name=$3
            
            echo "Updating $file with tag $tag"
            sed -i "s/app_version = \".*\"/app_version = \"${tag}\"/" "$file"
            
            if git diff --quiet "$file"; then
              echo "No changes needed in $file - already up to date"
              return 1
            else
              echo "Changes made to $file"
              return 0
            fi
          }

          # Variables for commit
          changes_made=false
          commit_message=""

          # Update both environments (production deployment)
          echo "Updating both environments"
          
          # Update development
          if update_file "$DEV_FILE" "$TAG" "development"; then
            changes_made=true
            commit_message="chore: update app_version to $TAG (dev) and $TAG (prod)"
          fi
          
          # Update production
          if update_file "$PROD_FILE" "$TAG" "production"; then
            changes_made=true
            if [ -z "$commit_message" ]; then
              commit_message="chore: update app_version to $TAG (prod)"
            fi
          fi

          # Check if any changes were made
          if [ "$changes_made" = false ]; then
            echo "No changes needed - app_version already up to date"
            exit 0
          fi

          # Commit and push changes
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "$DEV_FILE" "$PROD_FILE"
          git commit -m "$commit_message"
          git push
